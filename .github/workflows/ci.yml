name: CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt
          requirements-dev.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest-cov coverage

    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test-secret-key-for-ci-pipeline-do-not-use-in-production
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 15
        REFRESH_TOKEN_EXPIRE_DAYS: 7
        ENVIRONMENT: test
        DEBUG: "false"
        CORS_ORIGINS: '["http://localhost:3000"]'
        HOST: 0.0.0.0
        PORT: 8000
      run: |
        alembic upgrade head

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test-secret-key-for-ci-pipeline-do-not-use-in-production
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 15
        REFRESH_TOKEN_EXPIRE_DAYS: 7
        ENVIRONMENT: test
        DEBUG: "false"
        CORS_ORIGINS: '["http://localhost:3000"]'
        HOST: 0.0.0.0
        PORT: 8000
      run: |
        pytest -v --cov=app --cov-report=xml --cov-report=term-missing

    - name: Check coverage threshold
      run: |
        coverage report --fail-under=80

    - name: Upload coverage to Codecov (optional)
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      continue-on-error: true
